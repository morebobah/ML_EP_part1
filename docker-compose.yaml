
services:
  app:
    build: ./app/
    image: mlservice-api:latest
    restart: unless-stopped
    env_file:
      - ./app/.env
    volumes:
      - ./app:/app
    ports:
      - 8000:8000
    depends_on:
      - database
    networks:
      - ml_service_network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"] 
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
  ml_worker:
    build: ./mlworker/
    image: planner_ml_worker
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
    env_file:
      - ./mlworker/.env
    volumes:
      - ./mlworker:/app
    depends_on:
      - database
      - rabbitmq
    networks:
      - ml_service_network
  web-proxy:
    image: nginx:latest
    container_name: ml-service-nginx
    restart: unless-stopped
    build:
      dockerfile: ./nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      app:
        condition: service_healthy
    networks:
      - ml_service_network
  database:
    image: postgres:latest
    env_file:
      - ./app/.env
    ports:
      - 5432:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    networks:
      - ml_service_network
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq_for_ml
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648 
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - ml_service_network
volumes:
    postgres_volume:
    rabbitmq_volume:
networks:
  ml_service_network:
    name: ml_service_network
    driver: bridge



